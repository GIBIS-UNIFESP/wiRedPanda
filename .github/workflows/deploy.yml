# Copyright 2015 - 2025, GIBIS-Unifesp and the wiRedPanda contributors
# SPDX-License-Identifier: GPL-3.0-or-later

name: Deploy

on:
  release:
    types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt: [5.15.2, 6.9.0]

# =================================

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.os == 'ubuntu-latest' && 'ubuntu:20.04' || '' }}

    steps:
    - name: Install Ubuntu dependencies
      if: runner.os == 'Linux'
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y \
          build-essential \
          git \
          jq \
          libasound2 \
          libcups2 \
          libcurl4-openssl-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libfuse2 \
          libgstreamer-gl1.0-0 \
          libx11-dev \
          libx11-xcb-dev \
          libxcb-cursor0 \
          libxcb-glx0-dev \
          libxcb-icccm4-dev \
          libxcb-image0-dev \
          libxcb-keysyms1-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-shape0-dev \
          libxcb-shm0-dev \
          libxcb-sync0-dev \
          libxcb-xfixes0-dev \
          libxcb1-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libxrandr2 \
          libxrender-dev \
          ninja-build \
          sudo \
          wget

    - name: Install Modern CMake
      if: runner.os == 'Linux'
      run: |
        # Install CMake 3.25+ from Kitware's APT repository
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        echo 'deb https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
        apt-get update
        apt-get install -y cmake

    - name: Install Ubuntu Python
      if: runner.os == 'Linux'
      run: |
        apt-get install -y software-properties-common
        add-apt-repository ppa:deadsnakes/ppa
        apt-get update
        apt-get install -y curl python3.10
        ln -sf /usr/bin/python3.10 /usr/bin/python3
        curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python3 get-pip.py
        python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Extract Version
      run: echo "VERSION=$(echo $GITHUB_REF | sed 's|refs/tags/||')" >> $GITHUB_ENV
      shell: bash

    - name: Install Sentry CLI
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          LATEST_VERSION=$(curl -s https://api.github.com/repos/getsentry/sentry-cli/releases/latest | jq -r .tag_name)
          curl -LO "https://github.com/getsentry/sentry-cli/releases/download/$LATEST_VERSION/sentry-cli-Windows-x86_64.exe"
          mv sentry-cli-Windows-x86_64.exe sentry-cli.exe
          
          ACTUAL_VERSION=$(./sentry-cli.exe -V 2>&1 | tr -d '\r')

          if [[ ! "$ACTUAL_VERSION" =~ ^sentry-cli ]]; then
            echo "Downloaded Sentry CLI binary is invalid!" >&2
            exit 1
          fi
        else
          curl -sL https://sentry.io/get-cli/ | bash
        fi
      shell: bash

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qt }}
        arch: ${{ matrix.os == 'windows-latest' && matrix.qt == '5.15.2' && 'win32_msvc2019' || '' }}
        cache: true
        aqtversion: ==3.2.*
        modules: ${{ startsWith(matrix.qt, '6') && 'qtmultimedia qtimageformats debug_info' || 'debug_info' }}
        setup-python: ${{ matrix.os == 'ubuntu-latest' && 'false' || 'true' }}

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.qt }}

# =================================

    - name: Compile Ubuntu Sentry SDK
      if: runner.os == 'Linux'
      run: |
        git clone --recursive https://github.com/getsentry/sentry-native.git
        mkdir -p sentry-native/build
        cd sentry-native/build
        cmake .. -B build -D SENTRY_BACKEND=crashpad -D CMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja
        cmake --build build
        cmake --install build --prefix ../../thirdparty/sentry

    - name: Build Ubuntu
      if: runner.os == 'Linux'
      run: |
        cmake -B build -G Ninja
        cmake --build build --config Release
        mkdir -p build/lib
        cp thirdparty/sentry/bin/crashpad_handler build/
        cp thirdparty/sentry/lib/libsentry.so build/lib/

    - name: Test Ubuntu
      if: runner.os == 'Linux'
      run: |
        QT_QPA_PLATFORM=offscreen ./build/wiredpanda-test

    - name: linuxdeployqt
      if: runner.os == 'Linux'
      run: |
        mkdir -p appimage appimage/lib
        cp app/resources/wpanda.desktop appimage/wpanda.desktop
        cp app/resources/wpanda.svg appimage/wpanda_icon.svg
        cp build/wiredpanda appimage
        cp thirdparty/sentry/lib/libsentry.so appimage/lib/
        wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x ./linuxdeployqt-continuous-x86_64.AppImage
        ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract
        VERSION=$VERSION ./squashfs-root/usr/bin/linuxdeployqt ./appimage/wiredpanda -appimage
        rm ./linuxdeployqt-continuous-x86_64.AppImage
        mv wiRedPanda-$VERSION-x86_64.AppImage wiRedPanda-$VERSION-Ubuntu-Qt${{ matrix.qt }}.AppImage

    - name: Upload Ubuntu Debug Symbols to Sentry
      if: runner.os == 'Linux'
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        git config --global --add safe.directory '*'
        sentry-cli login --auth-token "$SENTRY_AUTH_TOKEN"
        sentry-cli releases new "wiredpanda@$VERSION" -p wiredpanda
        sentry-cli debug-files upload --include-sources -p wiredpanda build/
        sentry-cli debug-files upload --include-sources -p wiredpanda $QT_ROOT_DIR
        sentry-cli releases set-commits --auto "wiredpanda@$VERSION" --log-level=debug

    - name: Publish Ubuntu
      uses: softprops/action-gh-release@v2
      if: runner.os == 'Linux'
      with:
        fail_on_unmatched_files: true
        files: '*.AppImage'

# =================================

    - name: Setup Windows MSVC Toolchain
      if: runner.os == 'Windows'
      uses: pbeast/gha-setup-vsdevenv@master
      with:
        arch: ${{ startsWith(matrix.qt, '5') && 'x86' || 'x64' }}

    - name: Compile Windows Sentry SDK
      if: runner.os == 'Windows'
      run: |
        git clone --recursive https://github.com/getsentry/sentry-native.git
        mkdir -p sentry-native/build
        cd sentry-native/build
        cmake .. -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja
        cmake --build build
        cmake --install build --prefix ../../thirdparty/sentry

    - name: Build Windows
      if: runner.os == 'Windows'
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A ${{ startsWith(matrix.qt, '5') && 'Win32' || 'x64' }}
        cmake --build build --config Release
        cp thirdparty/sentry/bin/crashpad_handler.exe build/Release/
        cp thirdparty/sentry/bin/sentry.dll build/Release/
        cp thirdparty/sentry/bin/crashpad_wer.dll build/Release/

    - name: Test Windows
      if: runner.os == 'Windows'
      run: |
        cd build/Release
        powershell -Command "Start-Process -FilePath 'wiredpanda-test.exe' -Wait -NoNewWindow"

    - name: windeployqt
      if: runner.os == 'Windows'
      run : |
        cp -r examples build/Release
        cd build/Release
        windeployqt --compiler-runtime wiredpanda.exe
        cd ..
        ren Release wiredpanda-$env:VERSION
        Compress-Archive -Path wiredpanda-$env:VERSION -DestinationPath wiRedPanda-$env:VERSION-Windows-Qt${{ matrix.qt }}-Portable.zip

    - name: Upload Windows Debug Symbols to Sentry
      if: runner.os == 'Windows'
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        ./sentry-cli.exe login --auth-token $env:SENTRY_AUTH_TOKEN
        ./sentry-cli.exe releases new wiredpanda@$env:VERSION -p wiredpanda
        ./sentry-cli.exe debug-files upload --include-sources -p wiredpanda build/
        ./sentry-cli.exe debug-files upload --include-sources -p wiredpanda D:/a/wiRedPanda/Qt/
        ./sentry-cli.exe releases set-commits --auto wiredpanda@$env:VERSION --log-level=debug

    - name: Publish Windows
      if: runner.os == 'Windows'
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        files: 'build/*.zip'

# =================================

    - name: Compile macOS Sentry SDK
      if: runner.os == 'macOS'
      run: |
        git clone --recursive https://github.com/getsentry/sentry-native.git
        mkdir -p sentry-native/build
        cd sentry-native/build
        cmake .. -B build -D SENTRY_BACKEND=crashpad -D CMAKE_BUILD_TYPE=RelWithDebInfo -D CMAKE_OSX_ARCHITECTURES="x86_64;arm64" -G Ninja
        cmake --build build
        cmake --install build --prefix ../../thirdparty/sentry

    - name: Build macOS
      if: runner.os == 'macOS'
      run: |
        cmake -B build
        cmake --build build --config Release
        mkdir -p build/wiredpanda.app/Contents/MacOS
        mkdir -p build/wiredpanda.app/Contents/Frameworks
        # Copy the main executable to the app bundle
        cp build/wiredpanda build/wiredpanda.app/Contents/MacOS/
        cp thirdparty/sentry/bin/crashpad_handler build/wiredpanda.app/Contents/MacOS/
        cp thirdparty/sentry/lib/libsentry.dylib build/wiredpanda.app/Contents/Frameworks/

    - name: Generate macOS dSYM Symbols
      if: runner.os == 'macOS'
      run: |
        cd build
        dsymutil wiredpanda.app/Contents/MacOS/wiredpanda -o wiredpanda.app.dSYM

    - name: Test macOS
      if: runner.os == 'macOS'
      run: |
        ./build/wiredpanda-test

    - name: macdeployqt
      if: runner.os == 'macOS'
      run: |
        cd build
        macdeployqt wiredpanda.app -dmg
        mv wiredpanda.dmg wiRedPanda-$VERSION-macOS-Qt${{ matrix.qt }}.dmg

    - name: Upload macOS Debug Symbols to Sentry
      if: runner.os == 'macOS'
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        sentry-cli login --auth-token "$SENTRY_AUTH_TOKEN"
        sentry-cli releases new "wiredpanda@$VERSION" -p wiredpanda
        sentry-cli debug-files upload --include-sources -p wiredpanda build/
        sentry-cli debug-files upload --include-sources -p wiredpanda $QT_ROOT_DIR
        sentry-cli releases set-commits --auto "wiredpanda@$VERSION" --log-level=debug

    - name: Publish macOS
      if: runner.os == 'macOS'
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        files: 'build/*.dmg'
